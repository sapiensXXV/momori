name: momori 프론트엔드 운영서버 배포

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - /frontend/**

env:
  ARTIFACT_DIRECTORY: ./frontend/dist
  DOCKER_DIRECTORY: ./frontend/docker
  SSL_FULLCHAIN: ${{ secrets.SSL_FULLCHAIN }}
  SSL_PRIVKEY: ${{ secrets.SSL_PRIVKEY }}
  OPTIONS_SSL_NGINX: ${{ secrets.OPTIONS_SSL_NGINX }}

jobs:
  env-debug:
    name: debug environment variable
    runs-on: ubuntu-latest
    steps:
      - name: output
        run: |
          echo "ARTIFACT_DIRECTORY  is exists: ${{ env.ARTIFACT_DIRECTORY != '' }}"
          echo "DOCKER_DIRECTORY    is exists: ${{ env.DOCKER_DIRECTORY != '' }}"
          echo "SSL_FULLCHAIN       is exists: ${{ env.SSL_FULLCHAIN != '' }}"
          echo "SSL_PRIVKEY         is exists: ${{ env.SSL_PRIVKEY != '' }}"
          echo "OPTIONS_SSL_NGINX   is exists: ${{ env.OPTIONS_SSL_NGINX != '' }}"
  docker-image-build-push:
    name: docker image build & push
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: login docker
        uses: docker/login-action@v3
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: build docker image
        run: docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml build --no-cache
      - name: push docker image
        run: docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml
  deploy:
    name: deploy 
    needs: docker-image-build-push
    runs-on: ubuntu-latest
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
      - name: connect with SSH & deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVKEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            whoami
            cd momori
            git pull

            sudo docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml pull
            sudo docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml down
            sudo docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml up -d
