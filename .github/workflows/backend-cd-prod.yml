name: momori 백엔드 운영서버 배포

on: 
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - /backend/**

env:
  AWS_IAM_ACCESS_KEY: ${{ secrets.AWS_IAM_ACCESS_KEY }}
  AWS_IAM_SECRET_KEY: ${{ secrets.AWS_IAM_SECRET_KEY }}
  DOCKER_DIRECTORY: './backend/docker'
  JAR_PATH: './backend/build/libs'
  JAR_NAME: 'momori-0.1-SNAPSHOT'

jobs:
  debug: 
    name: Debug Environment Variable
    runs-on: ubuntu-latest
    steps:
      - name: env existency logs
        run: |
          echo "AWS_IAM_ACCESS_KEY is exists: ${{ env.AWS_IAM_ACCESS_KEY != '' }}"
          echo "AWS_IAM_SECRET_KEY is exists: ${{ env.AWS_IAM_SECRET_KEY != '' }}"

  build:
    name: build gradle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: setting JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: setup gradle
        uses: gradle/actions/setup-gradle@v3
      - name: build gradle
        run: |
          cd backend
          ./gradlew clean build
      - name: upload build result file
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.JAR_NAME }}
          path: ${{ env.JAR_PATH }}/${{ env.JAR_NAME }}.jar

  docker-image-build:
    needs: build
    runs-on: ubuntu-latest
    name: docker image build & push
    steps:
      - uses: actions/checkout@v4
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Download .jar artifact file
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.JAR_NAME }}
      - name: Build Docker Image
        run: |
          docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml build --no-cache
      - name: Push Docker Image
        run: |
          docker compose -f ${{ env.DOCKER_DIRECTORY }}/docker-compose.prod.yml push

  deploy:
    needs: [ build, docker-image-build ]
    name: Docker Container Deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Connect SSH And Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVKEY }}
          port: 22
          script: |
            cd momori
            git pull

            docker compose -f ./backend/docker/docker-compose.prod.yml pull
            docker compose -f ./backend/docker/docker-compose.prod.yml down
            docker compose -f ./backend/docker/docker-compose.prod.yml up -d